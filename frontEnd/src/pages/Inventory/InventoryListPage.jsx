import React, { useEffect, useState } from 'react';
import {
  Container,
  Typography,
  Paper,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  TextField,
  MenuItem,
  Stack,
  Button,
  IconButton,
  Box,
  Chip,
  Card,
  CardContent,
  Grid,
  Fade,
  Skeleton,
  InputAdornment,
  Tooltip,
  Menu,
  ListItemIcon,
  ListItemText,
  Divider,
  Alert
} from '@mui/material';
import {
  Visibility as VisibilityIcon,
  Add as AddIcon,
  Search as SearchIcon,
  FilterList as FilterIcon,
  Assignment as AssignmentIcon,
  CheckCircle as CheckCircleIcon,
  Schedule as ScheduleIcon,
  Business as BusinessIcon,
  MoreVert as MoreVertIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Clear as ClearIcon,
  CalendarToday as CalendarIcon,
  Person as PersonIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { 
  getInventories, 
  deleteInventory,
  getStaffList,
  getWarehouseAreas 
} from '../../services/inventoryService';
import { takeWarehouseAreaInven } from '../../services/storage';
import { fetchStaffList } from '../../services/staffService';
import { toast } from 'react-toastify';
import DeleteInventoryModal from './components/DeleteInventoryModal';

const InventoryListPage = () => {
  const navigate = useNavigate();

  const [inventory, setInventories] = useState([]);
  const [areas, setAreas] = useState([]);
  const [staffs, setStaffs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [selectedInventory, setSelectedInventory] = useState(null);
  const [anchorEl, setAnchorEl] = useState(null);
  const [menuInventory, setMenuInventory] = useState(null);

  // Enhanced filters
  const [filters, setFilters] = useState({
    status: '',
    search: '',
    staffId: '',
    dateFrom: '',
    dateTo: '',
  });

  const [originalInventories, setOriginalInventories] = useState([]);

  useEffect(() => {
    fetchData();
  }, []);


  useEffect(() => {
    applyFilters();
  }, [filters, originalInventories]);

  const fetchData = async () => {
    try {
      setLoading(true);
      console.log("üîÑ Fetching inventory data...");
      
      const [data, areaList, staffList] = await Promise.all([
        getInventories(), 
        takeWarehouseAreaInven(),
        fetchStaffList(),
      ]);

      console.log("üìã Raw inventory data:", data);
      console.log("üè¢ Areas data:", areaList);
      console.log("üë• Staff data:", staffList);

      const inventoryData = Array.isArray(data) ? data : [];
      setOriginalInventories(inventoryData);
      setInventories(inventoryData);
      setAreas(Array.isArray(areaList) ? areaList : []);
      setStaffs(Array.isArray(staffList) ? staffList : []);
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i danh s√°ch ki·ªÉm k√™:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ki·ªÉm k√™');
      setInventories([]);
      setOriginalInventories([]);
      setAreas([]);
      setStaffs([]);
    } finally {
      setLoading(false);
    }
  };

  const applyFilters = () => {
    let filtered = [...originalInventories];

    
    if (filters.status) {
      filtered = filtered.filter(inv => inv.status?.toString() === filters.status);
    }

    
    if (filters.staffId) {
      filtered = filtered.filter(inv => inv.createdId?.toString() === filters.staffId);
    }

    
    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      filtered = filtered.filter(inv => {
        const inventoryId = (inv.inventoryId || inv.id || '').toString().toLowerCase();
        const staffName = getStaffName(inv.createdId).toLowerCase();
        const areaName = getAreaName(inv.areaId).toLowerCase();
        
        return inventoryId.includes(searchLower) || 
               staffName.includes(searchLower) || 
               areaName.includes(searchLower);
      });
    }

    
    if (filters.dateFrom) {
      const fromDate = new Date(filters.dateFrom);
      filtered = filtered.filter(inv => {
        if (!inv.createdAt) return false;
        const invDate = new Date(inv.createdAt);
        return invDate >= fromDate;
      });
    }

    if (filters.dateTo) {
      const toDate = new Date(filters.dateTo);
      toDate.setHours(23, 59, 59, 999); 
      filtered = filtered.filter(inv => {
        if (!inv.createdAt) return false;
        const invDate = new Date(inv.createdAt);
        return invDate <= toDate;
      });
    }

    setInventories(filtered);
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  const clearFilters = () => {
    setFilters({
      status: '',
      search: '',
      staffId: '',
      dateFrom: '',
      dateTo: '',
    });
  };

  const getStatusConfig = (status) => {
    switch (status) {
      case 1:
        return {
          text: 'ƒêang ki·ªÉm k√™',
          color: 'warning',
          icon: <ScheduleIcon sx={{ fontSize: 16 }} />,
          bgColor: '#fff3e0',
          textColor: '#e65100'
        };
      case 2:
        return {
          text: 'ƒê√£ ho√†n t·∫•t',
          color: 'success',
          icon: <CheckCircleIcon sx={{ fontSize: 16 }} />,
          bgColor: '#e8f5e8',
          textColor: '#2e7d32'
        };
      default:
        return {
          text: 'Kh√¥ng x√°c ƒë·ªãnh',
          color: 'default',
          icon: null,
          bgColor: '#f5f5f5',
          textColor: '#666'
        };
    }
  };

  const getStaffName = (id) => {
    if (!Array.isArray(staffs)) return `ID: ${id}`;
    const staff = staffs.find((s) => s.id === id || s.staffId === id);
    return staff?.fullName || staff?.name || `ID: ${id}`;
  };
  
  const getAreaName = (id) => {
    if (!Array.isArray(areas)) return 'To√†n kho';
    const area = areas.find((a) => a.id === id);
    return area?.name || 'To√†n kho';
  };

  const handleViewDetails = (inv) => {
    if (inv.status === 1) {
      navigate(`/manager/inventory/details/${inv.inventoryId || inv.id}`);
    } else {
      navigate(`/manager/inventory/summary/${inv.inventoryId || inv.id}`);
    }
  };

  const handleMenuOpen = (event, inventory) => {
    setAnchorEl(event.currentTarget);
    setMenuInventory(inventory);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setMenuInventory(null);
  };

  const handleDeleteClick = (inventory) => {
    setSelectedInventory(inventory);
    setDeleteModalOpen(true);
    handleMenuClose();
  };

  const handleDeleteSuccess = (deletedInventory) => {
    
    setOriginalInventories(prev => 
      prev.filter(inv => 
        (inv.inventoryId || inv.id) !== (deletedInventory.inventoryId || deletedInventory.id)
      )
    );
    setInventories(prev => 
      prev.filter(inv => 
        (inv.inventoryId || inv.id) !== (deletedInventory.inventoryId || deletedInventory.id)
      )
    );
    setDeleteModalOpen(false);
    setSelectedInventory(null);
  };

  const renderTableSkeleton = () => (
    <>
      {[...Array(5)].map((_, index) => (
        <TableRow key={index}>
          <TableCell><Skeleton variant="text" width={80} /></TableCell>
          <TableCell><Skeleton variant="text" width={120} /></TableCell>
          <TableCell><Skeleton variant="text" width={100} /></TableCell>
          <TableCell><Skeleton variant="text" width={100} /></TableCell>
          <TableCell><Skeleton variant="rectangular" width={80} height={24} /></TableCell>
          <TableCell><Skeleton variant="circular" width={40} height={40} /></TableCell>
        </TableRow>
      ))}
    </>
  );

  const statsData = [
    {
      title: 'T·ªïng phi·∫øu ki·ªÉm k√™',
      value: originalInventories.length,
      icon: <AssignmentIcon sx={{ fontSize: 32 }} />,
      color: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      bgColor: '#e8eaf6'
    },
    {
      title: 'ƒêang ki·ªÉm k√™',
      value: originalInventories.filter(inv => inv.status === 1).length,
      icon: <ScheduleIcon sx={{ fontSize: 32 }} />,
      color: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
      bgColor: '#fff3e0'
    },
    {
      title: 'ƒê√£ ho√†n t·∫•t',
      value: originalInventories.filter(inv => inv.status === 2).length,
      icon: <CheckCircleIcon sx={{ fontSize: 32 }} />,
      color: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
      bgColor: '#e8f5e8'
    }
  ];

  const hasActiveFilters = Object.values(filters).some(value => value !== '');

  return (
    <Container maxWidth="xl" sx={{ py: 4 }}>
      {/* Header Section */}
      <Paper
        elevation={0}
        sx={{
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          borderRadius: 3,
          p: 4,
          mb: 4,
          color: 'white',
          position: 'relative',
          overflow: 'hidden'
        }}
      >
        <Box
          sx={{
            position: 'absolute',
            top: -50,
            right: -50,
            width: 200,
            height: 200,
            background: 'rgba(255,255,255,0.1)',
            borderRadius: '50%',
            zIndex: 1
          }}
        />
        <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ position: 'relative', zIndex: 2 }}>
          <Box display="flex" alignItems="center" gap={2}>
            <BusinessIcon sx={{ fontSize: 40 }} />
            <Box>
              <Typography variant="h4" fontWeight="bold" gutterBottom>
                Qu·∫£n l√Ω ki·ªÉm k√™ kho
              </Typography>
              <Typography variant="body1" sx={{ opacity: 0.9 }}>
                Theo d√µi v√† qu·∫£n l√Ω c√°c phi·∫øu ki·ªÉm k√™ h√†ng h√≥a
              </Typography>
            </Box>
          </Box>
          <Button
            variant="contained"
            size="large"
            startIcon={<AddIcon />}
            onClick={() => navigate('/manager/inventory/create')}
            sx={{
              bgcolor: 'rgba(255,255,255,0.2)',
              backdropFilter: 'blur(10px)',
              border: '1px solid rgba(255,255,255,0.3)',
              borderRadius: 2,
              px: 3,
              py: 1.5,
              fontWeight: 'bold',
              '&:hover': {
                bgcolor: 'rgba(255,255,255,0.3)',
                transform: 'translateY(-1px)',
                boxShadow: '0 8px 25px rgba(0,0,0,0.2)'
              },
              transition: 'all 0.3s ease'
            }}
          >
            T·∫°o phi·∫øu ki·ªÉm k√™ m·ªõi
          </Button>
        </Box>
      </Paper>

      {/* Stats Cards */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        {statsData.map((stat, index) => (
          <Grid item xs={12} md={4} key={index}>
            <Fade in={true} timeout={300 + index * 100}>
              <Card
                elevation={0}
                sx={{
                  borderRadius: 3,
                  border: '1px solid #e0e0e0',
                  transition: 'all 0.3s ease',
                  '&:hover': {
                    transform: 'translateY(-4px)',
                    boxShadow: '0 12px 30px rgba(0,0,0,0.1)'
                  }
                }}
              >
                <CardContent sx={{ p: 3 }}>
                  <Box display="flex" alignItems="center" justifyContent="space-between">
                    <Box>
                      <Typography variant="h3" fontWeight="bold" color="primary">
                        {stat.value}
                      </Typography>
                      <Typography variant="body1" color="text.secondary" sx={{ mt: 1 }}>
                        {stat.title}
                      </Typography>
                    </Box>
                    <Box
                      sx={{
                        width: 60,
                        height: 60,
                        borderRadius: 2,
                        background: stat.color,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        color: 'white'
                      }}
                    >
                      {stat.icon}
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Fade>
          </Grid>
        ))}
      </Grid>

      
      <Paper
        elevation={0}
        sx={{
          borderRadius: 3,
          border: '1px solid #e0e0e0',
          overflow: 'hidden'
        }}
      >
        
        <Box sx={{ p: 3, borderBottom: '1px solid #e0e0e0', bgcolor: '#f8f9fa' }}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6" sx={{ color: '#2c3e50', fontWeight: 'bold', display: 'flex', alignItems: 'center', gap: 1 }}>
              <FilterIcon />
              B·ªô l·ªçc t√¨m ki·∫øm
              {hasActiveFilters && (
                <Chip 
                  label={`${Object.values(filters).filter(v => v !== '').length} b·ªô l·ªçc`}
                  size="small"
                  color="primary"
                  sx={{ ml: 1 }}
                />
              )}
            </Typography>
            
            {hasActiveFilters && (
              <Button
                startIcon={<ClearIcon />}
                onClick={clearFilters}
                size="small"
                sx={{ color: '#666' }}
              >
                X√≥a b·ªô l·ªçc
              </Button>
            )}
          </Box>
          
          <Grid container spacing={2}>

            <Grid item xs={12} md={3}>
              <TextField
                name="search"
                label="T√¨m ki·∫øm"
                value={filters.search}
                onChange={handleFilterChange}
                placeholder="M√£ phi·∫øu"
                fullWidth
                size="small"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon sx={{ color: '#666' }} />
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>

   
            {/* <Grid item xs={12} md={2}>
              <TextField
                select
                name="areaId"
                label="Khu v·ª±c kho"
                value={filters.areaId}
                onChange={handleFilterChange}
                fullWidth
                size="small"
              >
                <MenuItem value="">T·∫•t c·∫£ khu v·ª±c</MenuItem>
                {areas.map((area) => (
                  <MenuItem key={area.id} value={area.id}>
                    {area.name}
                  </MenuItem>
                ))}
              </TextField>
            </Grid> */}

        
            <Grid item xs={12} md={2}>
              <TextField
                select
                name="status"
                label="Tr·∫°ng th√°i"
                value={filters.status}
                onChange={handleFilterChange}
                fullWidth
                size="small"
              >
                <MenuItem value="">T·∫•t c·∫£ tr·∫°ng th√°i</MenuItem>
                <MenuItem value="1">ƒêang ki·ªÉm k√™</MenuItem>
                <MenuItem value="2">ƒê√£ ho√†n t·∫•t</MenuItem>
              </TextField>
            </Grid>

           
            <Grid item xs={12} md={2}>
              <TextField
                select
                name="staffId"
                label="Nh√¢n vi√™n"
                value={filters.staffId}
                onChange={handleFilterChange}
                fullWidth
                size="small"
              >
                <MenuItem value="">T·∫•t c·∫£ nh√¢n vi√™n</MenuItem>
                {staffs.map((staff) => (
                  <MenuItem key={staff.id || staff.staffId} value={staff.id || staff.staffId}>
                    {staff.fullName || staff.name}
                  </MenuItem>
                ))}
              </TextField>
            </Grid>

      
            <Grid item xs={12} md={1.5}>
              <TextField
                name="dateFrom"
                label="T·ª´ ng√†y"
                type="date"
                value={filters.dateFrom}
                onChange={handleFilterChange}
                fullWidth
                size="small"
                InputLabelProps={{ shrink: true }}
              />
            </Grid>


            <Grid item xs={12} md={1.5}>
              <TextField
                name="dateTo"
                label="ƒê·∫øn ng√†y"
                type="date"
                value={filters.dateTo}
                onChange={handleFilterChange}
                fullWidth
                size="small"
                InputLabelProps={{ shrink: true }}
              />
            </Grid>
          </Grid>

       
          {hasActiveFilters && (
            <Alert severity="info" sx={{ mt: 2, borderRadius: 2 }}>
              <Typography variant="body2">
                Hi·ªÉn th·ªã <strong>{inventory.length}</strong> k·∫øt qu·∫£ t·ª´ t·ªïng s·ªë <strong>{originalInventories.length}</strong> phi·∫øu ki·ªÉm k√™
              </Typography>
            </Alert>
          )}
        </Box>

       
        <Box sx={{ overflow: 'auto' }}>
          <Table stickyHeader>
            <TableHead>
              <TableRow>
                <TableCell sx={{ bgcolor: '#f5f5f5', fontWeight: 700, fontSize: '0.95rem' }}>
                  M√£ phi·∫øu
                </TableCell>
                <TableCell sx={{ bgcolor: '#f5f5f5', fontWeight: 700, fontSize: '0.95rem' }}>
                  Nh√¢n vi√™n th·ª±c hi·ªán
                </TableCell>
                <TableCell sx={{ bgcolor: '#f5f5f5', fontWeight: 700, fontSize: '0.95rem' }}>
                  Khu v·ª±c ki·ªÉm k√™
                </TableCell>
                <TableCell sx={{ bgcolor: '#f5f5f5', fontWeight: 700, fontSize: '0.95rem' }}>
                  Ng√†y t·∫°o
                </TableCell>
                <TableCell sx={{ bgcolor: '#f5f5f5', fontWeight: 700, fontSize: '0.95rem' }}>
                  Tr·∫°ng th√°i
                </TableCell>
                <TableCell sx={{ bgcolor: '#f5f5f5', fontWeight: 700, fontSize: '0.95rem', textAlign: 'center' }}>
                  H√†nh ƒë·ªông
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {loading ? (
                renderTableSkeleton()
              ) : inventory.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} align="center" sx={{ py: 8 }}>
                    <AssignmentIcon sx={{ fontSize: 60, color: '#bdbdbd', mb: 2 }} />
                    <Typography variant="h6" color="text.secondary" gutterBottom>
                      {hasActiveFilters ? 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£' : 'Ch∆∞a c√≥ phi·∫øu ki·ªÉm k√™ n√†o'}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {hasActiveFilters 
                        ? 'Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ƒë·ªÉ t√¨m ki·∫øm phi·∫øu ki·ªÉm k√™ kh√°c'
                        : 'H√£y t·∫°o phi·∫øu ki·ªÉm k√™ ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu'
                      }
                    </Typography>
                  </TableCell>
                </TableRow>
              ) : (
                inventory.map((inv, index) => {
                  const statusConfig = getStatusConfig(inv.status);
                  return (
                    <Fade in={true} timeout={300 + index * 50} key={inv.inventoryId || inv.id}>
                      <TableRow
                        hover
                        sx={{
                          cursor: 'pointer',
                          transition: 'all 0.2s ease',
                          '&:hover': {
                            backgroundColor: '#f0f7ff',
                            transform: 'scale(1.001)'
                          }
                        }}
                      >
                        <TableCell 
                          sx={{ fontWeight: 600, color: '#1976d2' }}
                          onClick={() => handleViewDetails(inv)}
                        >
                          #{inv.inventoryId || inv.id}
                        </TableCell>
                        <TableCell onClick={() => handleViewDetails(inv)}>
                          <Box display="flex" alignItems="center" gap={1}>
                            <Box
                              sx={{
                                width: 32,
                                height: 32,
                                borderRadius: '50%',
                                bgcolor: '#e3f2fd',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                fontSize: '0.8rem',
                                fontWeight: 'bold',
                                color: '#1976d2'
                              }}
                            >
                              {(inv.staffName || getStaffName(inv.createdId)).charAt(0).toUpperCase()}
                            </Box>
                            <Typography variant="body2">
                              {inv.staffName || getStaffName(inv.createdId)}
                            </Typography>
                          </Box>
                        </TableCell>
                        <TableCell onClick={() => handleViewDetails(inv)}>
                          <Chip
                            label={getAreaName(inv.areaId)}
                            size="small"
                            sx={{
                              bgcolor: '#e8f5e8',
                              color: '#2e7d32',
                              fontWeight: 'bold'
                            }}
                          />
                        </TableCell>
                        <TableCell onClick={() => handleViewDetails(inv)}>
                          <Typography variant="body2" color="text.secondary">
                            {inv.createdAt ? new Date(inv.createdAt).toLocaleDateString('vi-VN') : 'N/A'}
                          </Typography>
                        </TableCell>
                        <TableCell onClick={() => handleViewDetails(inv)}>
                          <Chip
                            icon={statusConfig.icon}
                            label={statusConfig.text}
                            size="small"
                            sx={{
                              bgcolor: statusConfig.bgColor,
                              color: statusConfig.textColor,
                              fontWeight: 'bold',
                              border: 'none'
                            }}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Tooltip title="Th√™m h√†nh ƒë·ªông" arrow>
                            <IconButton
                              onClick={(e) => handleMenuOpen(e, inv)}
                              sx={{
                                bgcolor: '#e3f2fd',
                                color: '#1976d2',
                                '&:hover': {
                                  bgcolor: '#bbdefb',
                                  transform: 'scale(1.1)'
                                },
                                transition: 'all 0.2s ease'
                              }}
                            >
                              <MoreVertIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    </Fade>
                  );
                })
              )}
            </TableBody>
          </Table>
        </Box>

        {/* Footer */}
        {!loading && inventory.length > 0 && (
          <Box sx={{ p: 2, bgcolor: '#f8f9fa', borderTop: '1px solid #e0e0e0' }}>
            <Typography variant="body2" color="text.secondary">
              Hi·ªÉn th·ªã {inventory.length} phi·∫øu ki·ªÉm k√™
              {hasActiveFilters && ` (ƒë√£ l·ªçc t·ª´ ${originalInventories.length} phi·∫øu)`}
            </Typography>
          </Box>
        )}
      </Paper>

      {/* Action Menu */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
        PaperProps={{
          sx: {
            borderRadius: 2,
            minWidth: 200,
            boxShadow: '0 8px 25px rgba(0,0,0,0.1)'
          }
        }}
      >
        <MenuItem onClick={() => handleViewDetails(menuInventory)}>
          <ListItemIcon>
            <VisibilityIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>Xem chi ti·∫øt</ListItemText>
        </MenuItem>
        
        {menuInventory?.status === 1 && (
          <MenuItem onClick={() => {
            navigate(`/manager/inventory/details/${menuInventory.inventoryId || menuInventory.id}`);
            handleMenuClose();
          }}>
            <ListItemIcon>
              <EditIcon fontSize="small" />
            </ListItemIcon>
            <ListItemText>Ti·∫øp t·ª•c ki·ªÉm k√™</ListItemText>
          </MenuItem>
        )}
        
        <Divider />
        
        <MenuItem 
          onClick={() => handleDeleteClick(menuInventory)}
          sx={{ color: 'error.main' }}
        >
          <ListItemIcon>
            <DeleteIcon fontSize="small" color="error" />
          </ListItemIcon>
          <ListItemText>X√≥a phi·∫øu ki·ªÉm k√™</ListItemText>
        </MenuItem>
      </Menu>

      {/* Delete Modal */}
      <DeleteInventoryModal
        open={deleteModalOpen}
        onClose={() => setDeleteModalOpen(false)}
        inventory={selectedInventory}
        onSuccess={handleDeleteSuccess}
      />
    </Container>
  );
};

export default InventoryListPage;